https://embed.plnkr.co/NzMrJixtwZv0l2ohiZgQ/ 
import { Component,Input,ChangeDetectorRef,DoCheck } from '@angular/core';
import {GridOptions , GridApi} from 'ag-grid/main';
import { ShareDataService } from '../services/shareData.service';
import {Router} from '@angular/router';

@Component({
    selector:'table-comp',
    templateUrl:'./gridTable.component.html',
    styleUrls:['./gridTable.component.css']
})
export class GridTableComponent implements DoCheck{
    @Input() gridData;
    
    private gridDataKeys:any=[];
    private gridadataVals:any=[];
    
    private rowsPerPage:any=5;
    private gridOpt = <GridOptions>{};
    private gridOptions = <GridOptions>{};
    private colDefs:any=[];
    pagination:any=5;
    private atFirstPage:boolean=true;
    private firstRowForPage:any;
    private lastRowForPage:any;
    private rowsPerPageOption:any = [5,6,7];
    private gridColDef:any = [];
    private gridReady:boolean = false;
    private atLastPage:boolean;
    private totNoOfPages:any;
    private currentPage:any;
    private paginationset:boolean=true;
    
    private gridColWidth:any;
    private sideNavOpen:boolean;
    private prevSideNavStatus:boolean;
    private firstTimeLoad:boolean = true;
    private paramsValueVariable:string;
    
    constructor(private ref:ChangeDetectorRef, private shareData:ShareDataService, private router:Router){
        this.sideNavOpen = false;
        
        
       
    }
    ngOnChanges(){
        this.gridDataKeys = Object.keys(this.gridData[0]);
        console.log("Hello Usha Grid data is :"+this.gridData[0].TaskId);
        this.createGrid();
        
    }
    
    ngDoCheck(){
        this.sideNavOpen = this.shareData.getSideNavStatus();
        if(this.sideNavOpen != this.prevSideNavStatus){
            this.prevSideNavStatus = this.sideNavOpen;
            this.firstTimeLoad = false;
            let self = this;
            setTimeout(() => {
                this.initiateGridProps();
                this.createGrid();
                this.ref.detectChanges();
            },300)
            
            this.paginationset = false;
        }
        if(this.gridOptions.api && this.paginationset){
            this.setPaginationVars();
            this.paginationset = false;
        }
    }
    public initiateGridProps(){
        this.gridColDef = [];
        
    }
    
    public createGrid(){
        if(this.gridData){
            this.gridReady = false;
            this.setGridColWidth();
            
           this.setGridProps();
        }
    }
    private setGridColWidth(){
        let grid_container:any='';
        grid_container = document.getElementById('grid-card');
        if(grid_container){
            let grid_containerwidth = grid_container.offsetWidth;
            
            this.gridColWidth = Math.round((grid_containerwidth-110)/(this.gridDataKeys.length));
            
            if(!this.firstTimeLoad && !this.sideNavOpen){
                this.gridColWidth = Math.round((grid_containerwidth-40)/(this.gridDataKeys.length));
                this.firstTimeLoad = !this.firstTimeLoad;
            }
            if(this.sideNavOpen){
                this.gridColWidth = Math.round((grid_containerwidth-50)/(this.gridDataKeys.length));
            }
            this.ref.detectChanges()
            this.createGridCols();
        }
    }
    
    
    private createGridCols(){
        this.gridColDef=[];
        let keysOfGrid = Object.keys(this.gridData[0]);
        let colDef:any = {}
        let latestheader:any=[]
         /* 
        let colDef3 = {
 
                headerName: 'Collo',
               
                width: 62,
                
                cellRenderer: function(params){
                                
                                var ele =  '<span (contextmenu)="onAgContextMenu($event)" style="cursor:pointer;color:blue;text-decoration:underline" data-action-type="taskLink">' 
                                + 'cfdl123' + '</span>';;
                                
                                return ele;
                                   }
                                 
         }
           
            this.gridColDef.push(colDef3);  
      
    
        if(this.gridData[0].DealID){
            
        
       let colDef1 = {
 
                headerName: 'Upload',
               
                width: 62,
                cellRenderer: function(params){
                                
                                var ele ='<i class="material-icons" >attach_file</i>';
                                return ele;
                                   }
                                 
         }
           
            this.gridColDef.push(colDef1);  
            let colDef2 = {
 
                headerName: 'Deal Action',
               
                width: 62,
                cellRenderer: function(params){
                                
                                var ele ='<i class="material-icons" >file_download</i>';
                                return ele;
                                   }
                                 
         }
           
            this.gridColDef.push(colDef2);  
             
        
        }
        
        if(this.gridData[0].TaskId){
            //Colloboration Type
             let colDef3 = {
 
                headerName: 'Colloboration Type',
               
                width: 62,
                cellRenderer: function(params){
                                
                                var ele ='<i class="material-icons" >description</i>';
                                return ele;
                                   }
                                 
         }
           
            this.gridColDef.push(colDef3);  
            
        }
        */
        for(let i=0;i<keysOfGrid.length;i++){
             /*  
            if (keysOfGrid[i]=='BusinessArea') {
                 latestheader[i]='Business Area'
            }
            else if(keysOfGrid[i]=='Rushcase'){
                 latestheader[i]='Rush Case'
            }
            
            else if(keysOfGrid[i]=='Lockedby'){
                 latestheader[i]='Locked By'
            }
            
            else if(keysOfGrid[i]=='SentBy'){
                 latestheader[i]='Sent by'
            }
            
             else if(keysOfGrid[i]=='SubHandledby'){
                 latestheader[i]='Submission Handled by'
            } 
            else{
                 latestheader[i]=keysOfGrid[i];
            }
           */
           if(keysOfGrid[i]=='ID'){
             //  let keysOfGrid = Object.keys(this.gridData[1]);
              // console.log("The Grid tables first value is:"+keysOfGrid[1]);
            let   currentReference =this;
            let   colDef1 = {
                
 
                headerName: keysOfGrid[i],
                field: keysOfGrid[i],
                width:this.gridColWidth,
                cellRenderer: function(params){
                   
                   
                   currentReference.paramsValueVariable=params.value;
                //   / if(currentReference.paramsValueVariable.indexOf('CFDL')>=0){
                  if(currentReference.paramsValueVariable.indexOf('CFDL')>=0){
                      
                      if(currentReference.paramsValueVariable.indexOf('.')>=0){
                          var ele =  '<span (contextmenu)="onAgContextMenu($event)" style="cursor:pointer;color:blue;text-decoration:underline" data-action-type="taskLink">' 
                                + params.value + '</span>';;
                                
                                return ele;   
                      }
                      else{
                           var ele =  '<span (contextmenu)="onAgContextMenu($event)" style="cursor:pointer;color:blue;text-decoration:underline" data-action-type="dealLink">' 
                                + params.value + '</span>';;
                                
                                return ele;   
                      }
                                 
                 }
                 else{
                     var ele =  '<span (contextmenu)="onAgContextMenu($event)" style="cursor:pointer;color:blue;text-decoration:underline" data-action-type="submissionLink">' 
                                + params.value + '</span>';;
                                
                                return ele;  
                 }
                                
                              
                               
                                   },
                
                
                headerClass:"my-grid-header",
                cellStyle: {'color':'rgba(0,0,0,0.54)',
                            'font-size': '12px',
                            'font-weight':'600',
                            'word-break': 'normal',
                            'word-wrap': 'break-word'},
            }
            this.gridColDef.push(colDef1);
           }
           else{
                colDef = {
 
                headerName: keysOfGrid[i],
                field: keysOfGrid[i],
                width:this.gridColWidth,
                headerClass:"my-grid-header",
                cellStyle: {'color':'rgba(0,0,0,0.54)',
                            'font-size': '12px',
                            'font-weight':'600',
                            'word-break': 'normal',
                            'word-wrap': 'break-word'},
            }
            this.gridColDef.push(colDef);
               
           }
           
        }
        
        
        
    }//method closed
    
    private setGridProps(){
        this.gridOptions.columnDefs = this.gridColDef;
        this.gridOptions.rowData = this.gridData; 
        this.gridOpt.enableFilter = true;
        this.gridOpt.enableSorting = true;
        
        // this.gridOptions.api.refreshView();
        if(this.gridOptions.api){
            this.setPaginationVars();
        }
            
        this.gridReady = true;
    }
    
      private setCurrentPageSize(){
       this.gridOptions.api.paginationSetPageSize(this.rowsPerPage);
       if(this.gridOptions.api){
            this.setPaginationVars();
        }
       this.gridOptions.api.refreshView();
    }
    
      private goToPrevPage(){
           this.gridOptions.api.paginationGoToPreviousPage(); 
          if(this.gridOptions.api){
            this.setPaginationVars();
        }
         
    }
    
       private goToNextPage(){
          this.gridOptions.api.paginationGoToNextPage();
        if(this.gridOptions.api){
            this.setPaginationVars();
        }
        
    }
    private setPaginationVars(){
        this.currentPage = this.gridOptions.api.paginationGetCurrentPage();
        this.rowsPerPage = this.gridOptions.paginationPageSize;
        this.firstRowForPage = (this.currentPage )* this.rowsPerPage + 1;
        this.lastRowForPage = Number(this.firstRowForPage) + Number(this.rowsPerPage);
        if(this.lastRowForPage > this.gridData.length){
            this.lastRowForPage = this.gridData.length
        }
        this.gridOptions.api.paginationSetPageSize(this.rowsPerPage);
        this.totNoOfPages = this.gridOptions.api.paginationGetTotalPages();
        if(this.currentPage == this.totNoOfPages-1){
            this.atLastPage = true;
        }else{
            this.atLastPage = false;
        }
        if(this.currentPage == 0){
            this.atFirstPage = true;;
        }else{
            this.atFirstPage = false;
        }
        
        
        this.gridOptions.api.refreshView();
    }
    private goToFirstPage(){
        this.gridOptions.api.paginationGoToPage(0)
    }
    
   public setColumnDefinition(){
    
}
 
 
clickcalled(){
    
}
  public onRowClicked(trigger){
        if(trigger.event.target !== undefined ){
            let actionType = trigger.event.target.getAttribute("data-action-type");
           
            if(actionType == "dealLink"){
                trigger.event.preventDefault();
                console.log("Hello Welcome to Routing");
                this.router.navigateByUrl('/dealForm');
               
            }
            else if(actionType == "submissionLink"){
                 trigger.event.preventDefault();
               
                this.router.navigateByUrl('/submissionForm');
            }
            else if(actionType == "taskLink"){
                 trigger.event.preventDefault();
               
                this.router.navigateByUrl('/taskForm');
            }
            
           
          
    }
    
  }

} 

